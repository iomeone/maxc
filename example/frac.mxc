let pat: int[][] = [[1, 1], [1, 0]];

let p_rn: int = 2;
let p_cn: int = 2;

fn exist_at(i: int, j: int, d: int) -> int {
    if(d == 0) return 1;
    else if(exist_at(i / p_rn, j / p_cn, d - 1) == 0)
        return 0;
    else
        return pat[i % p_rn][j % p_cn];
}

fn print_frac(d: int) -> none {
    let i:int, j:int;
    let rn:int = 1;
    let cn:int = 1;

    for(i = 0; i < d; ++i) {
        rn = rn * p_rn;
        cn = cn * p_cn;
    }

    for(i = 0; i < rn; ++i) {
        for(j = 0; j < cn; ++j)
            print(exist_at(i, j, d) ? '*' : ' ');
        println("");
    }
}

print_frac(5);
